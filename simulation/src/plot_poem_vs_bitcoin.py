import matplotlib.pyplot as plt
import numpy as np
plt.rcParams['text.usetex'] = True

def plot_poem_vs_bitcoin():
  beta_range = [x * 0.01 for x in range(1, 41)]
  bitcoin_latency = [1.3315519012035129, 1.3551266505275907, 1.831086369444731, 2.6631038024070257, 2.6631038024070257, 2.9050379167129465, 3.172297631734323, 3.662172738889462, 4.49319437648866, 4.869362173096403, 5.300308010786359, 5.991242740082756, 6.73979156473299, 7.627419574227516, 8.43433472228571, 9.702830447945752, 10.542918402857138, 12.12853805993219, 13.321587243053436, 15.726180317710309, 17.98100968715065, 20.962329986503956, 23.97467958286753, 26.643174486106872, 29.968349478584415, 32.96518442644285, 38.430938308590584, 44.95252421787662, 52.40582496625989, 59.39326829509454, 73.36815495276385, 82.20870403483552, 99.51579962111668, 121.14966910396814, 151.43708637996016, 191.69540615493892, 233.6287762513318, 299.52407211709203, 395.3717751945615, 551.1242926954494]
  poem_latency = [1.361771742207103, 1.368848489816224, 1.3786107208267169, 1.3966595564474096, 1.445248710349446, 1.6741132392567903, 2.182559144118445, 2.759483933152565, 2.957589477106673, 3.2130466183007487, 3.504878712212034, 3.9383121217325505, 4.58424826452031, 5.562079238193175, 6.0999373024705115, 6.8804445977752815, 8.140154329211114, 9.052690891619994, 9.977483852579718, 12.094969832287765, 13.460352593942941, 15.306197966036189, 17.835857316302306, 20.574733074409874, 23.680727307328855, 26.85017638435097, 30.890063446473434, 36.09473999943005, 42.10678130347225, 50.489258079142616, 59.76618367803059, 70.45483828091004, 84.26605051901824, 104.61390846103446, 126.73955646420816, 159.94081760157937, 204.7700085199383, 259.3513135783719, 342.06743236035305, 456.67937175289444]
  # bitcoin_latency = [1.3314408412144454, 1.3553441126824806, 1.7672680619306167, 2.662881682428891, 2.662881682428891, 2.865354762933532, 3.106571974950121, 3.5345361238612334, 4.216565078998489, 4.852114414088052, 5.30180418579185, 5.991521486709921, 6.742211041394895, 7.322475079316894, 7.988695315613229, 9.53371433905319, 10.541412697496222, 11.978154169770896, 13.318375188612446, 14.97269271221362, 16.98240044930818, 18.645725264057425, 21.309400301779913, 26.636750377224892, 27.956578481579342, 31.45115079177676, 38.4402954121716, 44.91807813664086, 51.91205855984227, 59.407729273356104, 69.2160780797897, 86.52009759973713, 103.82411711968454, 125.45414151961883, 151.41017079953997, 185.68551924033204, 233.60436291525644, 305.482628427643, 401.3203157774918, 569.0362686397273]
  # poem_latency = [1.2806040544079422, 1.2876238728800253, 1.2978918307409153, 1.3131219221301214, 1.3584168108453711, 1.5544226420341956, 1.980799426627482, 2.593632705320171, 2.7828616010865934, 3.0037436778260846, 3.3477858374935447, 3.7696401011381764, 4.4179011610470775, 5.128422492319264, 5.7685146363628, 6.505450520549807, 7.297545861655798, 8.570167209738312, 9.434764845948335, 11.1496873768727, 12.608052776068323, 14.25273485759729, 16.867184473734483, 19.59655517797895, 22.387847801549974, 24.734584157106543, 26.13063133534577, 28.037402576400183, 30.036290096398695, 33.11667393013168, 36.90121304005016, 42.71171961239426, 50.3649556073723, 57.28125714344074, 70.57559236165353, 90.78663398204303, 109.7258957832731, 146.0399587761211, 210.43376765577452, 291.9128215721236]

  plt.plot(beta_range, poem_latency, marker='o', linestyle='-', color='red', label='PoEM')
  plt.plot(beta_range, bitcoin_latency, marker='x', linestyle='-', color='blue', label='Bitcoin')

  plt.title(r'PoEM vs Bitcoin latency based on adversarial resilience $\beta$')
  plt.xlabel(r'$\beta$')
  plt.ylabel(r'Latency (in $\Delta$s)')

  plt.legend()

  plt.show()


def plot_gamma_latency_beta_3():
  gamma_range = [x for x in range(1, 51)]
  latency = [53.48250272231214, 51.213044556520174, 52.37762471805808, 51.07991184795935, 51.11491070297514, 50.539652293686316, 51.48508441006183, 50.87692592889198, 51.534358053531335, 52.38973737521972, 51.82818843677679, 52.09082370185706, 51.41606637006647, 52.67984160168045, 52.2705250035994, 52.72232908566832, 52.669071019663036, 51.77602960283786, 53.694084211598444, 52.15799472062436, 53.71789840399956, 52.47324664112558, 52.74951528290995, 52.31022286637592, 54.658103600731145, 52.832104938536915, 52.67447169536516, 54.8276390767246, 53.17931735040867, 54.75891585736312, 54.928773868936524, 53.540555627952436, 54.86686617957293, 52.24956190556031, 52.914778522456835, 53.431339048776785, 52.30544064225777, 52.06156779271251, 52.59262528619077, 52.60117044636216, 52.653142693471914, 52.66950296981467, 55.41700323518265, 52.836414925116024, 52.29921644761582, 53.463348193169175, 52.29617187382921, 55.43808777050933, 52.115170846434864, 52.02229728909024]
  # gamma_range = [x for x in range(1, 206)]
  # latency = [48.44925926429645, 44.569112362736014, 47.52157083104403, 48.700483201213196, 45.36025399238874, 45.634598757267995, 46.03794213072071, 50.025975702374424, 46.738891849329946, 49.56156933627304, 47.02097841009472, 50.08343649596334, 47.76170858716983, 48.706336631376125, 50.6530488224511, 48.62868909432885, 47.771915384028254, 49.67134162158715, 50.42024538551058, 49.22044048374982, 48.90031573268548, 48.94030424582752, 45.753107285651474, 45.92662874718913, 50.16751595416712, 51.226907039074064, 47.36047090720749, 51.66824935923986, 45.832604130523826, 53.97845115426597, 51.725082264126655, 45.53079305106973, 48.56576206560546, 50.69570440950832, 50.0655009526968, 51.48560638807433, 48.31405191200918, 51.134797173927474, 49.46684374407352, 48.478047676801246, 51.82018002069222, 47.45096324454289, 48.29217415402801, 49.707725705834136, 49.5420319399916, 47.53317512182654, 49.67956202155866, 51.375067422172926, 52.17391346938799, 51.83519133077407, 51.861579890805594, 52.00794315887513, 51.685243673795355, 48.873908629285445, 52.162418870206174, 51.509907478777016, 52.05703567492763, 45.54318885856618, 49.845873210340336, 48.77823950591168, 51.57227842009812, 48.78302015039936, 47.70877120790993, 52.12979719621647, 50.543308825027836, 52.323355221292964, 49.26254422917012, 51.05332098869767, 47.39552271254003, 51.73691688319632, 48.71813785592266, 49.01729374619494, 48.93990522303763, 51.5815386103594, 49.34555761332867, 48.60748972850574, 48.638131570680066, 51.745287895028504, 51.38442831181244, 49.00498895332739, 49.3644945795448, 45.7183340011311, 52.9143089097113, 47.62470171549852, 48.950292177692646, 48.67277589219522, 47.86466461524983, 51.51265012668258, 48.90288745399113, 47.94619162764417, 48.10089834778709, 47.940643421960445, 49.20580236909635, 47.75220500179415, 51.362885464595855, 45.387739157203576, 47.61043755888838, 51.667894258036455, 50.88890844769436, 51.877445241402214, 51.807824656167256, 51.767941656361124, 48.848561255593, 48.606337318881266, 48.879470640531366, 52.12074793719937, 48.99682692784333, 51.90521139900529, 51.98086816671823, 47.61283331015841, 51.77157913577596, 48.91292576943045, 52.11288009129041, 48.96800131938675, 49.141531208281755, 51.77749395900976, 48.9755699197784, 48.837700142179784, 48.979251233778, 48.0199681960662, 45.27572300492782, 52.0152469277878, 47.8903613129063, 51.68764558337721, 48.757424164765226, 51.77690747677231, 51.87180077749584, 48.85988383260773, 45.48734734245158, 47.518073853185804, 51.79290667852672, 47.61170398077092, 49.11301925549869, 51.96446835002206, 48.943217865057065, 49.04926846065252, 52.558498671738306, 48.87429292483606, 48.90204668947363, 51.904798789255295, 48.8752863734471, 47.515644299535495, 48.598548738698135, 48.99633342667059, 54.267150372389295, 48.776728234398696, 48.09574209141488, 48.87374043058311, 52.02790776049146, 48.84718166499198, 49.10264759279879, 55.655554470924656, 45.580751048194635, 48.71119233216987, 47.806611692914856, 47.73565846481008, 48.923498748740656, 49.09748212724277, 51.843881566779544, 51.967901775384284, 51.924600341208716, 48.865030365858445, 52.61015115831468, 48.855509869720045, 47.73017011603323, 51.70834708645326, 48.7309424478093, 47.805879153221454, 45.41567560625114, 48.7633027561448, 48.895703102356855, 51.7959010278006, 51.822748792291314, 51.97076036618833, 48.9196546690257, 47.858521111523984, 48.91018028947738, 51.52141435218735, 47.630131798430945, 50.85418999059012, 51.991374340220965, 50.87011480503783, 49.134914965271236, 48.781908458940826, 47.53776596874488, 50.83966532254085, 48.93369031521544, 47.760983452750764, 49.00998006041258, 47.748026160128546, 47.714438382220166, 51.66926812165483, 52.40534611715116, 48.851246901344616, 51.70370745744392, 51.96801708865398, 51.83569811137347, 48.939599206960544, 45.49865263849872, 48.896974481079894, 47.34629280123088, 51.72412591802188, 48.799759013965186, 47.77277067898512, 47.79496027613898]

  plt.plot(gamma_range, latency, marker='o', linestyle='-', color='red')

  plt.title(r'PoEM: Latency per $\gamma$ with $\beta = 0.3$ and per-point optimal $g$')
  plt.xlabel(r'$\gamma$')
  plt.ylabel(r'Latency (in $\Delta$s)')

  plt.legend()

  plt.show()

def plot_gamma_latency_beta_1():
  gamma_range = [x for x in range(1, 51)]
  latency = [3.6385354506879577, 3.6058152398428565, 3.4908335813992037, 3.526657991023934, 3.4194432498106364, 3.3788537606698728, 3.349017745667418, 3.3166860426887452, 3.3809371669742094, 3.3531265894907523, 3.3442438261756795, 3.351823798662205, 3.3046949047743217, 3.346934587145235, 3.339811343086641, 3.317985026615011, 3.328249283864284, 3.3100202603170534, 3.3018011761854438, 3.290925330778549, 3.2909611362716618, 3.284203004879215, 3.260879340516472, 3.2490379660099737, 3.279071622354067, 3.2593916943565757, 3.256773910302936, 3.2570235468319217, 3.2378190065516197, 3.2466234218957215, 3.212760098018769, 3.2434931063128523, 3.2083782694229788, 3.2195935987617736, 3.226618501580788, 3.1845295387011108, 3.1709866407038425, 3.192623439971792, 3.214296458826924, 3.224533125639732, 3.1992817950886043, 3.182175893497242, 3.222729985671081, 3.17626250714149, 3.1792294117363986, 3.187976862301015, 3.19850399361249, 3.1876216660407617, 3.183561670801977, 3.1851341371442285]
  # gamma_range = [x for x in range(1, 206)]
  # latency = [3.2876473838483626, 3.3481990316771335, 3.278096916435957, 3.24447130616984, 3.170590729286776, 3.104114788552471, 3.157606759084429, 3.2893293367811194, 3.2173028587513373, 3.2588423000034688, 3.1233542787788577, 3.0506020015051507, 3.140621484710169, 3.197028111678888, 3.1634540662590767, 3.182883938030387, 3.117860712600688, 3.175918082912756, 3.10247745048954, 3.1748997114935458, 3.106117896903597, 3.1502933459619893, 3.1139969140646055, 3.071496603479063, 3.1738657140446316, 3.1775192781341706, 3.088576869776666, 3.1055898206127974, 3.1065696733877775, 3.1383836839225876, 3.1227777612162133, 3.10228756431593, 3.04044947164607, 3.0587277716872063, 3.0714454586064783, 3.0516873728647482, 3.161825139678584, 3.105511611339466, 2.975288292297253, 3.1454885024314696, 3.092591463081802, 3.1059388839286823, 3.039962135810267, 3.035100387999928, 3.1237161384989927, 3.126366350021957, 3.1146284290007573, 2.973132840372099, 3.0058393381606097, 3.1418626663190268, 3.0660940182802783, 3.0620599039061664, 3.1007276428703037, 2.977148621083566, 3.0698136993327205, 3.090749339571091, 3.0535657494926003, 3.030128804824224, 3.073189207488269, 3.104165276487272, 3.0689667294225003, 2.9942958013098964, 2.9770327294176635, 3.0850488515826333, 2.9943549288461875, 3.0333268852325235, 3.029750469964887, 3.0146456425201653, 3.077527778640155, 3.065133604047823, 3.0694348448554236, 3.064411004006432, 3.045622565016339, 3.046471723413221, 3.08976620229256, 3.0310075003079846, 3.0210328217977303, 3.053477976393986, 3.031334446610203, 3.0554233428289366, 3.0007933106113867, 3.0251914733923426, 3.0150689920345033, 3.0422214453894774, 3.0464964573977777, 3.085861905140115, 3.086619203024817, 3.0974397358828245, 2.9920027928792834, 3.0106035082740292, 3.018376305564499, 2.982087407203886, 3.017790114084765, 3.0242021787231637, 2.9976370297474078, 3.012148106434696, 2.930781975568986, 3.0249741747359735, 3.0031653638958025, 3.0419862899099614, 3.0453685791441676, 3.0008004646139907, 3.066179180297205, 3.0274981362683104, 3.0544173870750275, 3.0357327115224457, 3.041576022785018, 3.050938592586304, 3.038276124925373, 2.979661051837793, 3.0233042682381757, 3.016125073407639, 3.0432236537300352, 3.0395176311685352, 3.0886538793547462, 3.0848105554811998, 3.0541155143663743, 2.996388015567771, 3.0257341612941624, 3.0045509022430883, 3.035979782748622, 2.9965985058541724, 2.939131447213283, 3.031682965247404, 3.036471022410596, 3.032151442014145, 2.9457404697938925, 2.9902260841006534, 3.05613551897199, 3.0157580296681994, 3.124823533609896, 3.0141375419628034, 3.074865902130361, 3.0786530942060075, 2.9230079626935312, 3.0639762805071893, 2.999079834739826, 2.932644755198853, 3.02366804974677, 3.02852501115297, 3.003894871650461, 3.0040200622336455, 2.993622659135147, 2.95328905783713, 3.0832818657606844, 2.930783028427862, 3.059364085626527, 3.0144648313691738, 2.9677190912830564, 2.989625945107351, 3.005327889581196, 2.9394355851698406, 2.9754540402887937, 3.0235390627648817, 3.0284715062091725, 3.005418402795963, 2.9906304546031857, 3.0209142556138526, 2.978394824250183, 3.0579123061931983, 3.0217296072484006, 3.01514821391712, 2.965399394833248, 3.0776686141942746, 3.0187619596826996, 3.010660177556841, 3.057413539765161, 2.9820547086542346, 3.0146285647089486, 3.081786756051061, 2.9850605680958004, 3.0147024650381558, 3.0734228818661196, 2.93340863752573, 3.022819045206908, 2.9694312777696164, 3.026465071807341, 3.0555056908898477, 2.9949241500023556, 3.0171566955460887, 2.929574609710815, 3.015105116952638, 3.0859223141959493, 2.9747234573202634, 2.9679969515327067, 3.0558652283837544, 2.9793587505074317, 3.0015075210565967, 3.0225517232968535, 2.9802808563403045, 3.0668464521718843, 3.0582694119547487, 2.972313532339888, 2.966226761476648, 3.0231883629795373, 3.0282346044022446, 2.9872226611692967, 3.0143125832568556, 3.0182745393508776, 3.024180880633115, 3.0711847144747826, 2.966626247498497, 3.0145356303586164, 3.018189513789052, 2.9466312973860793]

  plt.plot(gamma_range, latency, marker='o', linestyle='-', color='red')

  plt.title(r'PoEM: Latency per $\gamma$ with $\beta = 0.1$ and per-point optimal $g$')
  plt.xlabel(r'$\gamma$')
  plt.ylabel(r'Latency (in $\Delta$s)')

  plt.legend()

  plt.show()

def plot_gamma_for_g_with_beta_3():
  g_range = [0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0, 1.1, 1.2000000000000002, 1.3, 1.4000000000000001, 1.5, 1.6, 1.7000000000000002, 1.8]
  gamma_range = [38.0, 22.0, 47.0, 4.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

  plt.plot(g_range, gamma_range, marker='o', linestyle='-', color='red')

  plt.title(r'PoEM: Optimal $\gamma$ per $g$ with $\beta = 0.3$')
  plt.xlabel(r'$g$')
  plt.ylabel(r'$\gamma$')

  plt.legend()

  plt.show()

def plot_gamma_for_g_with_beta_1():
  g_range = [0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0, 1.1, 1.2000000000000002, 1.3, 1.4000000000000001, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9000000000000001, 2.0, 2.1, 2.2, 2.3000000000000003, 2.4000000000000004, 2.5, 2.6, 2.7, 2.8000000000000003, 2.9000000000000004, 3.0]
  gamma_range = [5.0, 11.0, 10.0, 50.0, 44.0, 4.0, 6.0, 44.0, 39.0, 2.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
  # g_range = [0.1, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 1.0, 1.1, 1.2000000000000002, 1.3, 1.4000000000000001, 1.5, 1.6, 1.7000000000000002, 1.8, 1.9000000000000001, 2.0, 2.1, 2.2, 2.3000000000000003, 2.4000000000000004, 2.5, 2.6, 2.7, 2.8000000000000003, 2.9000000000000004, 3.0]
  # gamma_range = [6.0, 5.0, 6.0, 5.0, 6.0, 6.0, 7.0, 6.0, 6.0, 7.0, 9.0, 8.0, 8.0, 27.0, 46.0, 48.0, 41.0, 45.0, 4.0, 3.0, 3.0, 3.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0]

  plt.plot(g_range, gamma_range, marker='o', linestyle='-', color='red')

  plt.title(r'PoEM: Optimal $\gamma$ per $g$ with $\beta = 0.1$')
  plt.xlabel(r'$g$')
  plt.ylabel(r'$\gamma$')

  plt.legend()

  plt.show()


# def plot_optimal_poem():

#   plt.plot(g_range, gamma_range, marker='o', linestyle='-', color='red')

#   plt.title(r'PoEM: Optimal $\gamma$ per $g$ with $\beta = 0.1$')
#   plt.xlabel(r'$g$')
#   plt.ylabel(r'$\gamma$')

#   plt.legend()

#   plt.show()

def plot_optimal_poem():
  # 10,000 - 2
  beta_range = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36, 0.37, 0.38, 0.39, 0.4]
  latency_range = [1.4105222461125564, 1.428989162688707, 1.452063027707757, 1.4910002690554396, 1.5656061791581573, 1.8373830055999079, 2.353489973086451, 2.7321458901705866, 3.013495631417364, 3.2786602812896515, 3.6723522731193383, 4.158296430656788, 4.861835327661704, 5.615454253747579, 6.214518806765018, 7.0646027433659775, 8.221013616311659, 9.430742244972377, 10.706543875477154, 12.051185841997823, 13.605107327829076, 15.757165782162373, 18.15980416664484, 20.214232784305512, 23.781242587460213, 27.125553162843218, 30.932558433933256, 35.96525712774327, 42.15158780074053, 48.456147122016375, 57.447437856964235, 69.26993560479472, 86.24156248106021, 105.50015656215191, 130.94043784877073, 161.19383167907975, 207.13891717179533, 263.14612785641623, 347.9679009827461, 469.34034539837324]
  g_range = [3.0, 3.0, 3.0, 3.0, 3.0, 2.1, 1.3, 2.2, 2.1, 1.7000000000000002, 1.4000000000000001, 1.1, 0.8, 1.2000000000000002, 1.0, 0.8, 0.6000000000000001, 0.8, 0.6000000000000001, 0.7000000000000001, 0.6000000000000001, 0.6000000000000001, 0.7000000000000001, 0.5, 0.5, 0.5, 0.5, 0.5, 0.4, 0.4, 0.4, 0.4, 0.4, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.2, 0.2, 0.2, 0.2]
  gamma_range = [20.0, 19.0, 20.0, 19.0, 20.0, 19.0, 20.0, 5.0, 20.0, 19.0, 20.0, 20.0, 20.0, 12.0, 18.0, 20.0, 20.0, 20.0, 20.0, 3.0, 20.0, 8.0, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 7.0, 3.0, 2.0, 5.0, 6.0, 3.0, 0.9]

  # 10,000 - 1
  # beta_range = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36, 0.37, 0.38, 0.39, 0.4]
  # latency_range = [1.395247870000816, 1.4167283626855256, 1.4425328367334131, 1.496419020891418, 1.5789226576150757, 1.868718948199069, 2.376915425083128, 2.6323681651437782, 2.911668320130894, 3.1755163828697883, 3.409170269312654, 3.9566585904079514, 4.529775130590197, 4.962569732971433, 6.07893358482154, 6.853216039938011, 7.578030621622448, 8.937812760380321, 10.196099345233247, 11.282419874675846, 13.275606585530383, 15.233394906073244, 16.880549881227996, 18.923309234025197, 22.145537118860098, 26.310752477271116, 30.918960631349186, 34.82693978750594, 40.37957300352481, 49.82443108942641, 57.00374545154259, 65.8037789091961, 81.73474610960233, 98.0112512296947, 126.75997104593353, 159.22822092996708, 198.405562663677, 249.75871472330206, 330.5857769512306, 446.86088328030223]
  # g_range =  [3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.7, 2.4000000000000004, 2.0, 1.8, 1.6, 1.1, 1.0, 0.7000000000000001, 1.0, 0.8, 0.7000000000000001, 0.8, 0.6000000000000001, 0.6000000000000001, 0.9, 0.5, 0.5, 0.7000000000000001, 0.7000000000000001, 0.5, 0.5, 0.7000000000000001, 0.6000000000000001, 0.7000000000000001, 0.4, 0.4, 0.4, 0.4, 0.30000000000000004, 0.5, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.2]
  # gamma_range = [20.0, 20.0, 20.0, 19.0, 19.0, 17.0, 3.0, 5.0, 5.0, 17.0, 19.0, 7.0, 13.0, 20.0, 15.0, 18.0, 20.0, 19.0, 9.0, 9.0, 17.0, 20.0, 6.0, 1.0, 1.0, 6.0, 12.0, 0.26, 0.86, 0.34, 3.0, 3.0, 3.0, 0.56, 0.76, 0.2, 0.76, 0.88, 0.76, 4.0]
  # 1,000
  # beta_range = [0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35000000000000003, 0.36, 0.37, 0.38, 0.39, 0.4]
  # latency_range = [1.407318919056516, 1.4244124318328666, 1.4478649936736274, 1.4840733672411148, 1.5580955281584494, 1.8172740655080382, 2.400329542136948, 2.7324481117132957, 3.0166873439806188, 3.273247385392143, 3.612141407592593, 4.162332486466932, 4.830017996781127, 5.629942119086091, 6.252931568591684, 6.920935439343545, 8.17889382418509, 9.061641350867482, 10.142335988327677, 11.769553185594354, 13.520846111357482, 15.398218990632923, 17.71964788330301, 20.46561542780925, 23.44258260047932, 27.025179377811085, 31.446248258839116, 36.561703791013215, 42.72578290368082, 50.463678584553286, 59.451172056599226, 70.45993859992645, 83.28329843896931, 103.25651766066822, 126.69930552280606, 159.6013203740744, 200.6481399594527, 256.7263306315498, 337.6465060926247, 451.1256635270706]
  # g_range =  [3.0, 3.0, 3.0, 3.0, 3.0, 1.9000000000000001, 1.2000000000000002, 2.2, 1.8, 1.7000000000000002, 1.4000000000000001, 1.1, 0.8, 1.2000000000000002, 1.0, 0.8, 1.0, 0.8, 0.8, 0.8, 0.6000000000000001, 0.7000000000000001, 0.6000000000000001, 0.6000000000000001, 0.6000000000000001, 0.5, 0.5, 0.4, 0.4, 0.4, 0.4, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.2, 0.2, 0.2, 0.2]
  # gamma_range = [20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 5.0, 8.0, 15.0, 19.0, 16.0, 20.0, 12.0, 16.0, 20.0, 13.0, 4.0, 4.0, 4.0, 20.0, 4.0, 4.0, 3.0, 7.0, 7.0, 6.0, 6.0, 6.0, 2.0, 2.0, 4.0, 4.0, 4.0, 4.0, 2.0, 9.0, 4.0, 3.0, 4.0]

  # Plotting
  fig, ax1 = plt.subplots()
  ax1.plot(beta_range, latency_range, marker='o', linestyle='-', color='blue', label='Latency')
  ax1.set_xlabel(r'$\beta$')
  ax1.set_ylabel(r'Latency (in $\Delta$s)', color='b')
  ax1.tick_params(axis='y', labelcolor='b')

  ax2 = ax1.twinx()
  ax2.plot(beta_range, g_range, marker='x', linestyle='dashed', label=r'$g$', color='red')
  ax2.set_ylabel(r'$g$', color='r')
  ax2.tick_params(axis='y', labelcolor='red')

  ax2 = ax1.twinx()
  ax2.plot(beta_range, gamma_range, marker='1', linestyle='dotted', label=r'$\gamma$', color='green')
  ax2.set_ylabel(r'$\gamma$', color='g')
  ax2.tick_params(axis='y', labelcolor='green')

  plt.title(r'PoEM: Optimal parametrization per $\beta$')
  fig.tight_layout()
  plt.show()

def plot_gamma_latency():
    import json

    # Open and read the JSON file
    with open('../../rust-simulation/simulation_data/gamma_latency_β_0.4_g_0.5.json', 'r') as file:
        data = json.load(file)

    monte_carlo = data['monte_carlo']
    error = data['error']
    beta = data['beta']
    g = data['g']
    gamma_range = data['gamma']
    latency = data['latency']

    plt.plot(gamma_range, latency, marker='o', linestyle='-', color='red')

    plt.title(rf'PoEM: Latency per $\gamma$ with $\beta = {beta}$ and $g = {g}$ (MONTE_CARLO = {monte_carlo}, error = {error})')
    plt.xlabel(r'$\gamma$')
    plt.ylabel(r'Latency (in $\Delta$s)')

    plt.legend()

    plt.show()



# plot_poem_vs_bitcoin()
# plot_gamma_latency_beta_3()
# plot_gamma_for_g_with_beta_1()
# plot_gamma_for_g_with_beta_1()
# plot_optimal_poem()
plot_gamma_latency()
